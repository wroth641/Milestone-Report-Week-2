# Coursera Data Science Capstone: Milestone Report
By: William Roth

##  Introduction
This is the Milestone Report for the Coursera Data Science Capstone project. The goal of the capstone project is to create a predictive text model using a large text corpus of documents as training data. Natural language processing techniques will be used to perform the analysis and build the predictive model.

This milestone report describes the major features of the training data with our exploratory data analysis and summarizes our plans for creating the predictive model.

## Getting The Data

We downloaded the zip file containing the text files from https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip.

    # Download and unzip the data to local disk
    if (!file.exists("Coursera-SwiftKey.zip")) {
      download.file("https://d396qusza40orc.cloudfront.net/dsscapstone/dataset/Coursera-SwiftKey.zip")
      unzip("Coursera-SwiftKey.zip")
    }
    
The data sets consist of text from 3 different sources: 1) News, 2) Blogs and 3) Twitter feeds. The text data are provided in 4 different languages: 1) German, 2) English - United States, 3) Finnish and 4) Russian. In this project, we will only focus on the English - United States data sets.

    # Read the blogs and Twitter data into R
    blogs <- readLines("final/en_US/en_US.blogs.txt", encoding = "UTF-8", skipNul = TRUE)
    news <- readLines("final/en_US/en_US.news.txt", encoding = "UTF-8", skipNul = TRUE)
    twitter <- readLines("final/en_US/en_US.twitter.txt", encoding = "UTF-8", skipNul = TRUE)

We examined the data sets and summarize our findings (file sizes, line counts, word counts, and mean words per line) below.

    library(stringi)
    
    # Get file sizes
    blogs.size <- file.info("final/en_US/en_US.blogs.txt")$size / 1024 ^ 2
    news.size <- file.info("final/en_US/en_US.news.txt")$size / 1024 ^ 2
    twitter.size <- file.info("final/en_US/en_US.twitter.txt")$size / 1024 ^ 2

    # Get words in files
    blogs.words <- stri_count_words(blogs)
    news.words <- stri_count_words(news)
    twitter.words <- stri_count_words(twitter)

    # Summary of the data sets
    data.frame(source = c("blogs", "news", "twitter"),
               file.size.MB = c(blogs.size, news.size, twitter.size),
               num.lines = c(length(blogs), length(news), length(twitter)),
               num.words = c(sum(blogs.words), sum(news.words), sum(twitter.words)),
               mean.num.words = c(mean(blogs.words), mean(news.words), mean(twitter.words)))
               
               
    ##    source file.size.MB num.lines num.words mean.num.words
    ## 1   blogs     200.4242    899288  37546246       41.75108
    ## 2    news     196.2775   1010242  34762395       34.40997
    ## 3 twitter     159.3641   2360148  30093410       12.75065
    
## Cleaning The Data
Before performing exploratory analysis, we must clean the data first. This involves removing URLs, special characters, punctuations, numbers, excess whitespace, stopwords, and changing the text to lower case. Since the data sets are quite large, we will randomly choose 1% of the data to demonstrate the data cleaning and exploratory analysis.

    library(tm)
    ## Loading required package: NLP
    # Sample the data
    set.seed(679)
    data.sample <- c(sample(blogs, length(blogs) * 0.01),
                     sample(news, length(news) * 0.01),
                     sample(twitter, length(twitter) * 0.01))

    # Create corpus and clean the data
    corpus <- VCorpus(VectorSource(data.sample))
    toSpace <- content_transformer(function(x, pattern) gsub(pattern, " ", x))
    corpus <- tm_map(corpus, toSpace, "(f|ht)tp(s?)://(.*)[.][a-z]+")
    corpus <- tm_map(corpus, toSpace, "@[^\\s]+")
    corpus <- tm_map(corpus, tolower)
    corpus <- tm_map(corpus, removeWords, stopwords("en"))
    corpus <- tm_map(corpus, removePunctuation)
    corpus <- tm_map(corpus, removeNumbers)
    corpus <- tm_map(corpus, stripWhitespace)
    corpus <- tm_map(corpus, PlainTextDocument)

## Exploratory Analysis
We are now ready to perform exploratory analysis on the data. It would be interesting and helpful to find the most frequently occurring words in the data. Here we list the most common unigrams, bigrams, and trigrams.

    library(RWeka)
    library(ggplot2)
    ## 
    ## Attaching package: 'ggplot2'
    ## 
    ## The following object is masked from 'package:NLP':
    ## 
    ##     annotate
    options(mc.cores=1)
    
    getFreq <- function(tdm) {
      freq <- sort(rowSums(as.matrix(tdm)), decreasing = TRUE)
      return(data.frame(word = names(freq), freq = freq))
    }
    bigram <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 2))
    trigram <- function(x) NGramTokenizer(x, Weka_control(min = 3, max = 3))
    makePlot <- function(data, label) {
      ggplot(data[1:30,], aes(reorder(word, -freq), freq)) +
             labs(x = label, y = "Frequency") +
             theme(axis.text.x = element_text(angle = 60, size = 12, hjust = 1)) +
             geom_bar(stat = "identity", fill = I("grey50"))
    }
    
    # Get frequencies of most common n-grams in data sample
    freq1 <- getFreq(removeSparseTerms(TermDocumentMatrix(corpus), 0.9999))
    freq2 <- getFreq(removeSparseTerms(TermDocumentMatrix(corpus, control = list(tokenize = bigram)), 0.9999))
    freq3 <- getFreq(removeSparseTerms(TermDocumentMatrix(corpus, control = list(tokenize = trigram)), 0.9999))

Here is a histogram of the 30 most common unigrams in the data sample.

    makePlot(freq1, "30 Most Common Unigrams")
    

Here is a histogram of the 30 most common bigrams in the data sample.

    makePlot(freq2, "30 Most Common Bigrams")
    
Here is a histogram of the 30 most common trigrams in the data sample.

    makePlot(freq3, "30 Most Common Trigrams")

## Next Steps For Prediction Algorithm And Shiny App
This concludes our exploratory analysis. The next steps of this capstone project would be to finalize our predictive algorithm, and deploy our algorithm as a Shiny app.

Our predictive algorithm will be using n-gram model with frequency lookup similar to our exploratory analysis above. One possible strategy would be to use the trigram model to predict the next word. If no matching trigram can be found, then the algorithm would back off to the bigram model, and then to the unigram model if needed.

The user interface of the Shiny app will consist of a text input box that will allow a user to enter a phrase. Then the app will use our algorithm to suggest the most likely next word after a short delay. Our plan is also to allow the user to configure how many words our app should suggest.

